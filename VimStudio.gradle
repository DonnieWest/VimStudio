// outputs all gradle's library paths into a file so we can use them in vim.
// Usage: 
// #1: Copy into your project-directory
// #2: On the command line run: gradle outputPaths

import groovy.transform.Field

@Field static String OUTPUT_FILE = ".output_paths_result"

@Field HashSet<String> classpathFiles = new HashSet<String>()
@Field String finalFileContents = ""

task outputPaths << {
    println "Writing all gradle library paths to: " + OUTPUT_FILE

    addProjectAndSubProjectJarsToList()
    generateFileContentsFromList()
    generateClassPathFile()
}

def addProjectAndSubProjectJarsToList() {
    addJarsToClassPathFilesList(rootProject)
    for (proj in getChildProjects()) {
        addJarsToClassPathFilesList(proj.value)
    }
}

def addJarsToClassPathFilesList(proj) {
    addProjectConfigsToList(proj)
    addProjectSourceSetsToList(proj)
}

def addProjectConfigsToList(proj) {
    for (conf in proj.configurations) {
        for (jar in conf) {
            classpathFiles += jar
        }
    }
}
def addProjectSourceSetsToList(proj) {
    if (proj.hasProperty("sourceSets")) {
    
      for (srcSet in proj.sourceSets) {
          for (dir in srcSet.java.srcDirs) {
              classpathFiles += dir.absolutePath
          }
      }
    }
}

def generateFileContentsFromList() {
    def paths = classpathFiles.join(':')
    finalFileContents = paths
}

def generateClassPathFile() {
    new File(rootProject.projectDir.absolutePath + "/" + OUTPUT_FILE).text = finalFileContents
     
    for (proj in getChildProjects()) {
      
      new File(proj.value.projectDir.absolutePath + "/" + OUTPUT_FILE).text = finalFileContents
    }
}
